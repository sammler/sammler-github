{"version":3,"sources":["repos.js"],"names":["_","gh","ghUtils","repos","base","Error","ghClient","getGhClient","db","options","cb","cfg","extend","_getRepos","err","res","_saveRepos","getAll","filter","fork","private"],"mappings":";;;;;;;;AAAA;;IAAYA,C;;AACZ;;IAAYC,E;;AACZ;;IAAYC,O;;;;;;IAESC,K;AACnB,iBAAaC,IAAb,EAAoB;AAAA;;AAClB,QAAK,CAACA,IAAN,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAW,iBAAX,CAAN;AACD;AACD,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,QAAL,GAAgBL,GAAGM,WAAH,EAAhB;;AAEA;AACA,SAAKC,EAAL,GAAU,KAAKJ,IAAL,CAAUI,EAApB;AACD;;AAED;;;;;;;;;;;;;;;;;8BAaWC,O,EAASC,E,EAAK;AAAA;;AAEvB,UAAIC,MAAM;AACR,uBAAe,OADP;AAER,oBAAY;AAFJ,OAAV;;AAKAA,YAAMX,EAAEY,MAAF,CAAUD,GAAV,EAAeF,WAAW,EAA1B,CAAN;AACA,WAAKI,SAAL,CAAgBF,GAAhB,EAAqB,UAAEG,GAAF,EAAOC,GAAP,EAAgB;AACnC,YAAKD,GAAL,EAAW;AACT,gBAAMA,GAAN;AACD;AACD,cAAKE,UAAL,CAAiBD,GAAjB,EAAsBL,EAAtB;AACD,OALD;AAMD;;AAED;AACA;AACA;;AAEA;;;;;;;;;;8BAOWD,O,EAASC,E,EAAK;AACvBR,cAAQe,MAAR,CAAgB,KAAKX,QAArB,EAA+B,cAA/B,EAA+CG,OAA/C,EAAwD,UAAEK,GAAF,EAAOC,GAAP,EAAgB;AACtEA,cAAMf,EAAEkB,MAAF,CAAUH,GAAV,EAAe,EAAEI,MAAM,KAAR,EAAeC,SAAS,KAAxB,EAAf,CAAN;AACA,eAAOV,GAAII,GAAJ,EAASC,GAAT,CAAP;AACD,OAHD;AAID;;;;;;kBAzDkBZ,K","file":"repos.js","sourcesContent":["import * as _ from 'lodash';\nimport * as gh from './gh';\nimport * as ghUtils from './ghUtils';\n\nexport default class repos {\n  constructor( base ) {\n    if ( !base ) {\n      throw new Error( 'No base defined' );\n    }\n    this.base = base;\n    this.ghClient = gh.getGhClient();\n\n    // shortcuts\n    this.db = this.base.db;\n  }\n\n  /**\n   * Sync all existing repositories.\n   *\n   * @description\n   *\n   * The repositories will be filtered as follows:\n   * - Forked repositories are ignored.\n   *\n   *\n   * @param {object} options - Configuration options for repos.getAll (as defined on http://mikedeboer.github.io/node-github/#api-users-getAll & http://mikedeboer.github.io/node-github/#api-repos-getAll)\n   * @param {callback} cb - Callback\n   * @public\n   */\n  syncRepos( options, cb ) {\n\n    var cfg = {\n      \"affiliation\": \"owner\",\n      \"per_page\": 100\n    };\n\n    cfg = _.extend( cfg, options || {} );\n    this._getRepos( cfg, ( err, res ) => {\n      if ( err ) {\n        throw err;\n      }\n      this._saveRepos( res, cb );\n    } );\n  }\n\n  // *****************************************************************************\n  // Internal helper methods\n  // *****************************************************************************\n\n  /**\n   * Load repositories for the given (current authenticated) user.\n   *\n   * @param options\n   * @param cb\n   * @private\n   */\n  _getRepos( options, cb ) {\n    ghUtils.getAll( this.ghClient, 'repos.getAll', options, ( err, res ) => {\n      res = _.filter( res, { fork: false, private: false } );\n      return cb( err, res );\n    } );\n  }\n}\n"],"sourceRoot":"/Users/swr/git/sammler/sammler-middleware-github/src"}